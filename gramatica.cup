import java_cup.runtime.*;
import vistdsapixmlcreator.Writer;
import vistdsapixmlcreator.Paso;
import vistdsapixmlcreator.Node;
import java.util.HashSet;
action code
{:
Writer writer = new Writer("./gramatica.txt","./ascendent","./cadenaDePrueba.txt",false);

:}


terminal String constint;
terminal mas, por, puntoComa;
non terminal EXP1;
non terminal Exp EXP;
non terminal A A;
non terminal B B;
non terminal C C;
non terminal Mas MAS;
non terminal Por POR;
non terminal PuntoComa PUNTOCOMA;
non terminal Constint CONSTINT;

EXP1 ::= EXP:exp{:
    System.out.println(exp.getValue());

    
    writer.writeXML();
:};
EXP ::= B:b A:a PUNTOCOMA:pc{:
    Exp exp=new Exp();
    //exp.setValue(b.getValue()+a.getValue());
    writer.addPasoNoTerminal("Exp", "null",Integer.parseInt( b.getValue())+Integer.parseInt(a.getValue()), exp, b, a, pc);    
    RESULT=exp;
    
:};
PUNTOCOMA ::= puntoComa{:
    PuntoComa puntComa=new PuntoComa();
    writer.addPasoTerminal(";", null, puntComa);
    RESULT=puntComa;
:};
A ::= MAS:m B:b A:a1{:
    A a=new A();
    //a.setValue(b.getValue()+a1.getValue());
    writer.addPasoNoTerminal("A", "result", Integer.parseInt(b.getValue())+Integer.parseInt(a1.getValue()),a, m, b, a1); 
    RESULT=a;
:}

|{:
    A a=new A();
    //a.setValue(0);
    writer.addPasoLambda("A1", "result", 0, a);
    RESULT=a;
:};
MAS ::= mas{:
    Mas plus=new Mas();
    writer.addPasoTerminal("+", null, plus);
    RESULT =plus;
:};
B ::= CONSTINT:constint C:c{:
    B b=new B();
    //b.setValue(num.getValue()*c.getValue());
    writer.addPasoNoTerminal("B", "result", Integer.parseInt(constint.getValue())*Integer.parseInt(c.getValue()), b, constint, c); 
    RESULT=b;
:};
CONSTINT ::= constint:number{:
    Constint constint=new Constint();
    //num.setValue(Integer.parseInt(number));
    writer.addPasoTerminal("constint", "vlex", Integer.parseInt(number), constint);
    RESULT=constint;
:};
C ::= POR:p CONSTINT:constint C:c1{:
    C c=new C();
    //c.setValue(num.getValue()*c1.getValue());
    writer.addPasoNoTerminal("C", "result", Integer.parseInt(constint.getValue())*Integer.parseInt(c1.getValue()), c, p, constint, c1); 
    RESULT=c;
:}

|{:
    C c=new C();
    //c.setValue(1);
    writer.addPasoLambda("C1", "result", 1, c);
    RESULT=c;
:};

POR ::= por{:
    Por mult=new Por();
    writer.addPasoTerminal("*", null, mult);
    RESULT=mult;
:};