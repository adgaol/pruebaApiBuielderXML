package pruebaapiascendente;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import vistdsapixmlcreator.Writer;
import vistdsapixmlcreator.Paso;
import vistdsapixmlcreator.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\006\003\000\002\002\004\000\002\007" +
    "\005\000\002\010\005\000\002\010\002\000\002\011\004" +
    "\000\002\012\005\000\002\012\002\000\002\002\003\000" +
    "\002\003\003\000\002\004\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\004\004\007\001\002\000\004\002\025\001" +
    "\002\000\010\005\ufffa\006\020\007\ufffa\001\002\000\004" +
    "\002\001\001\002\000\010\005\ufff9\006\ufff9\007\ufff9\001" +
    "\002\000\006\005\013\007\ufffd\001\002\000\004\007\016" +
    "\001\002\000\004\004\007\001\002\000\004\004\ufff6\001" +
    "\002\000\006\005\013\007\ufffd\001\002\000\004\007\ufffe" +
    "\001\002\000\004\002\ufff7\001\002\000\004\002\uffff\001" +
    "\002\000\004\004\ufff8\001\002\000\004\004\007\001\002" +
    "\000\006\005\ufffc\007\ufffc\001\002\000\010\005\ufffa\006" +
    "\020\007\ufffa\001\002\000\006\005\ufffb\007\ufffb\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\012\002\004\006\003\007\005\011\007\001" +
    "\001\000\002\001\001\000\006\003\020\012\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\011\010" +
    "\010\001\001\000\004\004\016\001\001\000\006\002\004" +
    "\011\013\001\001\000\002\001\001\000\006\005\011\010" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\022\001\001\000" +
    "\002\001\001\000\006\003\020\012\023\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


Writer writer = new Writer("./gramatica.txt","./ascendent","cadenaDePrueba.txt",false);

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // EXP1 ::= EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(exp.getValue());    
    writer.writeXML();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= EXP1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXP ::= B A PUNTOCOMA 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		B b = (B)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		A a = (A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PuntoComa puntocoma = (PuntoComa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp exp=new Exp();
    writer.addPasoNoTerminal("Exp", "null", Integer.parseInt(b.getValue())+Integer.parseInt(a.getValue()), "EXP::= B A ;", exp, b, a, puntocoma);    
    RESULT=exp;
  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= MAS B A 
            {
              A RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Mas mas = (Mas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		B b = (B)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		A a1 = (A)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    A a=new A();
    writer.addPasoNoTerminal("A", "result", Integer.parseInt(b.getValue())+Integer.parseInt(a1.getValue()), "A::= + B A", a, mas, b, a1); 
    RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= 
            {
              A RESULT =null;
		
    A a=new A();
    writer.addPasoLambda("A1", "result", 0, a);
    RESULT=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= NUMBER C 
            {
              B RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Number number = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		C c = (C)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    B b=new B();
    writer.addPasoNoTerminal("B", "result", Integer.parseInt(number.getValue())*Integer.parseInt(c.getValue()), "B::= num C", b, number, c); 
    RESULT=b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C ::= POR NUMBER C 
            {
              C RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Por por = (Por)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Number number = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		C c1 = (C)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    C c=new C();
    writer.addPasoNoTerminal("C", "result", Integer.parseInt(number.getValue())*Integer.parseInt(c1.getValue()), "C::= por num C1", c, por, number, c1); 
    RESULT=c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= 
            {
              C RESULT =null;
		
    C c=new C();
    writer.addPasoLambda("C1", "result", 1, c);
    RESULT=c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NUMBER ::= number 
            {
              Number RESULT =null;
		int numberidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numberidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numberid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Number n=new Number();
    writer.addPasoTerminal("number", null, numberid, n);
    RESULT=n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMBER",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // POR ::= por 
            {
              Por RESULT =null;
		int poridleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poridright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object porid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Por p=new Por();
    writer.addPasoTerminal(porid.toString(), null, p);
    RESULT=p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PUNTOCOMA ::= puntoComa 
            {
              PuntoComa RESULT =null;
		int puntoComaidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntoComaidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object puntoComaid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    PuntoComa p=new PuntoComa();
    writer.addPasoTerminal(puntoComaid.toString(), null, p);
    RESULT=p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAS ::= mas 
            {
              Mas RESULT =null;
		int masidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int masidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object masid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Mas m=new Mas();
    writer.addPasoTerminal(masid.toString(), null, m);
    RESULT=m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
